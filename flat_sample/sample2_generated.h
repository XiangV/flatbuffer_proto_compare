// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAMPLE2_XIANGV_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SAMPLE2_XIANGV_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace xiangv {
namespace sample {

struct StructSample;

struct TableSample;
struct TableSampleBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) StructSample FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t f1_;
  int32_t padding0__;
  int64_t f2_;

 public:
  StructSample()
      : f1_(0),
        padding0__(0),
        f2_(0) {
    (void)padding0__;
  }
  StructSample(int32_t _f1, int64_t _f2)
      : f1_(flatbuffers::EndianScalar(_f1)),
        padding0__(0),
        f2_(flatbuffers::EndianScalar(_f2)) {
    (void)padding0__;
  }
  int32_t f1() const {
    return flatbuffers::EndianScalar(f1_);
  }
  int64_t f2() const {
    return flatbuffers::EndianScalar(f2_);
  }
};
FLATBUFFERS_STRUCT_END(StructSample, 16);

struct TableSample FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TableSampleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STR_FIELD = 4,
    VT_STRUCT_FIELD = 6
  };
  const flatbuffers::String *str_field() const {
    return GetPointer<const flatbuffers::String *>(VT_STR_FIELD);
  }
  const xiangv::sample::StructSample *struct_field() const {
    return GetStruct<const xiangv::sample::StructSample *>(VT_STRUCT_FIELD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STR_FIELD) &&
           verifier.VerifyString(str_field()) &&
           VerifyField<xiangv::sample::StructSample>(verifier, VT_STRUCT_FIELD) &&
           verifier.EndTable();
  }
};

struct TableSampleBuilder {
  typedef TableSample Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_str_field(flatbuffers::Offset<flatbuffers::String> str_field) {
    fbb_.AddOffset(TableSample::VT_STR_FIELD, str_field);
  }
  void add_struct_field(const xiangv::sample::StructSample *struct_field) {
    fbb_.AddStruct(TableSample::VT_STRUCT_FIELD, struct_field);
  }
  explicit TableSampleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TableSample> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TableSample>(end);
    return o;
  }
};

inline flatbuffers::Offset<TableSample> CreateTableSample(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> str_field = 0,
    const xiangv::sample::StructSample *struct_field = 0) {
  TableSampleBuilder builder_(_fbb);
  builder_.add_struct_field(struct_field);
  builder_.add_str_field(str_field);
  return builder_.Finish();
}

inline flatbuffers::Offset<TableSample> CreateTableSampleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *str_field = nullptr,
    const xiangv::sample::StructSample *struct_field = 0) {
  auto str_field__ = str_field ? _fbb.CreateString(str_field) : 0;
  return xiangv::sample::CreateTableSample(
      _fbb,
      str_field__,
      struct_field);
}

inline const xiangv::sample::TableSample *GetTableSample(const void *buf) {
  return flatbuffers::GetRoot<xiangv::sample::TableSample>(buf);
}

inline const xiangv::sample::TableSample *GetSizePrefixedTableSample(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<xiangv::sample::TableSample>(buf);
}

inline bool VerifyTableSampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<xiangv::sample::TableSample>(nullptr);
}

inline bool VerifySizePrefixedTableSampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<xiangv::sample::TableSample>(nullptr);
}

inline void FinishTableSampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<xiangv::sample::TableSample> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTableSampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<xiangv::sample::TableSample> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace sample
}  // namespace xiangv

#endif  // FLATBUFFERS_GENERATED_SAMPLE2_XIANGV_SAMPLE_H_
