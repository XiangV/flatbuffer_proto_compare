// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAMPLE_XIANGV_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SAMPLE_XIANGV_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace xiangv {
namespace sample {

struct ClientUniqID;

struct NameInfo;
struct NameInfoBuilder;

struct ClientReport;
struct ClientReportBuilder;

enum DBAccessType : int8_t {
  DBAccessType_Get = 0,
  DBAccessType_Put = 1,
  DBAccessType_MIN = DBAccessType_Get,
  DBAccessType_MAX = DBAccessType_Put
};

inline const DBAccessType (&EnumValuesDBAccessType())[2] {
  static const DBAccessType values[] = {
    DBAccessType_Get,
    DBAccessType_Put
  };
  return values;
}

inline const char * const *EnumNamesDBAccessType() {
  static const char * const names[3] = {
    "Get",
    "Put",
    nullptr
  };
  return names;
}

inline const char *EnumNameDBAccessType(DBAccessType e) {
  if (flatbuffers::IsOutRange(e, DBAccessType_Get, DBAccessType_Put)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDBAccessType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ClientUniqID FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t ip_;
  int32_t padding0__;
  uint64_t id_;

 public:
  ClientUniqID()
      : ip_(0),
        padding0__(0),
        id_(0) {
    (void)padding0__;
  }
  ClientUniqID(int32_t _ip, uint64_t _id)
      : ip_(flatbuffers::EndianScalar(_ip)),
        padding0__(0),
        id_(flatbuffers::EndianScalar(_id)) {
    (void)padding0__;
  }
  int32_t ip() const {
    return flatbuffers::EndianScalar(ip_);
  }
  uint64_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
};
FLATBUFFERS_STRUCT_END(ClientUniqID, 16);

struct NameInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NameInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_INFO = 6
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  const flatbuffers::String *info() const {
    return GetPointer<const flatbuffers::String *>(VT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyString(info()) &&
           verifier.EndTable();
  }
};

struct NameInfoBuilder {
  typedef NameInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(NameInfo::VT_X, x, 0);
  }
  void add_info(flatbuffers::Offset<flatbuffers::String> info) {
    fbb_.AddOffset(NameInfo::VT_INFO, info);
  }
  explicit NameInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NameInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NameInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<NameInfo> CreateNameInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    flatbuffers::Offset<flatbuffers::String> info = 0) {
  NameInfoBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_x(x);
  return builder_.Finish();
}

inline flatbuffers::Offset<NameInfo> CreateNameInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    const char *info = nullptr) {
  auto info__ = info ? _fbb.CreateString(info) : 0;
  return xiangv::sample::CreateNameInfo(
      _fbb,
      x,
      info__);
}

struct ClientReport FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientReportBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_TYPE = 6,
    VT_INFO = 8,
    VT_NAME = 10,
    VT_NAMES = 12,
    VT_COUNT = 14,
    VT_COST = 16
  };
  const xiangv::sample::ClientUniqID *uid() const {
    return GetStruct<const xiangv::sample::ClientUniqID *>(VT_UID);
  }
  xiangv::sample::DBAccessType type() const {
    return static_cast<xiangv::sample::DBAccessType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *info() const {
    return GetPointer<const flatbuffers::String *>(VT_INFO);
  }
  const xiangv::sample::NameInfo *name() const {
    return GetPointer<const xiangv::sample::NameInfo *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<xiangv::sample::NameInfo>> *names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<xiangv::sample::NameInfo>> *>(VT_NAMES);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  int32_t cost() const {
    return GetField<int32_t>(VT_COST, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<xiangv::sample::ClientUniqID>(verifier, VT_UID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyString(info()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyTable(name()) &&
           VerifyOffset(verifier, VT_NAMES) &&
           verifier.VerifyVector(names()) &&
           verifier.VerifyVectorOfTables(names()) &&
           VerifyField<int32_t>(verifier, VT_COUNT) &&
           VerifyField<int32_t>(verifier, VT_COST) &&
           verifier.EndTable();
  }
};

struct ClientReportBuilder {
  typedef ClientReport Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(const xiangv::sample::ClientUniqID *uid) {
    fbb_.AddStruct(ClientReport::VT_UID, uid);
  }
  void add_type(xiangv::sample::DBAccessType type) {
    fbb_.AddElement<int8_t>(ClientReport::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_info(flatbuffers::Offset<flatbuffers::String> info) {
    fbb_.AddOffset(ClientReport::VT_INFO, info);
  }
  void add_name(flatbuffers::Offset<xiangv::sample::NameInfo> name) {
    fbb_.AddOffset(ClientReport::VT_NAME, name);
  }
  void add_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<xiangv::sample::NameInfo>>> names) {
    fbb_.AddOffset(ClientReport::VT_NAMES, names);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(ClientReport::VT_COUNT, count, 0);
  }
  void add_cost(int32_t cost) {
    fbb_.AddElement<int32_t>(ClientReport::VT_COST, cost, 0);
  }
  explicit ClientReportBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientReport> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientReport>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientReport> CreateClientReport(
    flatbuffers::FlatBufferBuilder &_fbb,
    const xiangv::sample::ClientUniqID *uid = 0,
    xiangv::sample::DBAccessType type = xiangv::sample::DBAccessType_Get,
    flatbuffers::Offset<flatbuffers::String> info = 0,
    flatbuffers::Offset<xiangv::sample::NameInfo> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<xiangv::sample::NameInfo>>> names = 0,
    int32_t count = 0,
    int32_t cost = 0) {
  ClientReportBuilder builder_(_fbb);
  builder_.add_cost(cost);
  builder_.add_count(count);
  builder_.add_names(names);
  builder_.add_name(name);
  builder_.add_info(info);
  builder_.add_uid(uid);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientReport> CreateClientReportDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const xiangv::sample::ClientUniqID *uid = 0,
    xiangv::sample::DBAccessType type = xiangv::sample::DBAccessType_Get,
    const char *info = nullptr,
    flatbuffers::Offset<xiangv::sample::NameInfo> name = 0,
    const std::vector<flatbuffers::Offset<xiangv::sample::NameInfo>> *names = nullptr,
    int32_t count = 0,
    int32_t cost = 0) {
  auto info__ = info ? _fbb.CreateString(info) : 0;
  auto names__ = names ? _fbb.CreateVector<flatbuffers::Offset<xiangv::sample::NameInfo>>(*names) : 0;
  return xiangv::sample::CreateClientReport(
      _fbb,
      uid,
      type,
      info__,
      name,
      names__,
      count,
      cost);
}

inline const xiangv::sample::ClientReport *GetClientReport(const void *buf) {
  return flatbuffers::GetRoot<xiangv::sample::ClientReport>(buf);
}

inline const xiangv::sample::ClientReport *GetSizePrefixedClientReport(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<xiangv::sample::ClientReport>(buf);
}

inline bool VerifyClientReportBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<xiangv::sample::ClientReport>(nullptr);
}

inline bool VerifySizePrefixedClientReportBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<xiangv::sample::ClientReport>(nullptr);
}

inline void FinishClientReportBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<xiangv::sample::ClientReport> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientReportBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<xiangv::sample::ClientReport> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace sample
}  // namespace xiangv

#endif  // FLATBUFFERS_GENERATED_SAMPLE_XIANGV_SAMPLE_H_
